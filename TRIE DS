import java.util.*;
import java.lang.*;
import java.io.*;

// The main method must be in a class named "Main".
class Main {
    static class Node{
        Node[] children;
        boolean eow;
        public Node(){
            children = new Node[26];
            for(int i = 0;i<26;i++){
                children[i] = null;
            }
            eow = false;
        }
    }

    static Node root = new Node();
    public static void insert(String word){
       Node curr = root;
       for(int i = 0;i<word.length();i++){
           int idx = word.charAt(i) - 'a';
           if(curr.children[idx]==null){
               curr.children[idx] = new Node();
           }
          if(i==word.length()-1){
              curr.children[idx].eow = true;
          }
           curr = curr.children[idx];
    }
 }

    public static boolean search(String key){
        Node curr = root;
        for(int i = 0;i<key.length();i++){
            int idx = key.charAt(i) - 'a';
            Node node = curr.children[idx];
            if(node==null){
                return false;
            }
            if(i==key.length()-1 && node.eow==false){
                return false;
            }
            curr = curr.children[idx];
        }
        return true;
    }
    // Q.1) Word Break Problem(Imp):
    public static boolean wordBreak(String key){
        if(key.length()==0){
            return true;
        }
        for(int i = 1;i<=key.length();i++){
            String fpart = key.substring(0,i);
            String spart = key.substring(i);
            if(search(fpart) && wordBreak(spart)){
                return true;
            }
        }
        return false;
    }

    // Q.2) startsWith with Question:
    public static boolean startsWith(String prefix){
        if(prefix.length()==0){
            return false;
        }
        Node curr = root;
        for(int i = 0;i<prefix.length();i++){
            int idx = prefix.charAt(i) - 'a';
            if(curr.children[idx]==null){
                return false;
            }
            curr = curr.children[idx];
        }
        return true;
    }

    // Q.3) Count Unique Substrings:
    public static int countNodes(Node root){
        if(root==null){
            return 0;
        }
        int count = 0;
        for(int i = 0;i<26;i++){
            if(root.children[i]!=null){
                count+=countNodes(root.children[i]);
            }
        }
        return count+1;
    }

    // Q.4) Longest word with all prefixes:
    public static String ans="";
    public static void longestWord(Node root,StringBuilder temp){
        if(root==null){
            return;
        }
        for(int i = 0;i<26;i++){
            if(root.children[i]!=null && root.children[i].eow==true){
                temp.append((char)(i +'a'));
                if(temp.length()>ans.length()){
                    ans = temp.toString();
                }
                longestWord(root.children[i],temp);
                temp.deleteCharAt(temp.length()-1);
            }
        }
    }
    public static void main(String[] args) {
        // String words[] = {"the","a","there","their","any"};
        // for(int i = 0;i<words.length;i++){
        //     insert(words[i]);
        // }
        // System.out.println(search("their"));
        // System.out.println(search("thor"));
        // System.out.println(search("any"));

        // String words[] = {"i","like","sam","samsung","mobile"};
        // String key = "ilikesamsung";

        // String words[] = {"apple","app","mango","man","woman"};
        // String prefix = "wom";
        // for(int i = 0;i<words.length;i++){
        //     insert(words[i]);
        // }
        // System.out.println(wordBreak(key));
        // System.out.println(startsWith(prefix));
        // String str = "apple";  ----> 15 
        // String str = "ababa";
        // for(int i = 0;i<str.length();i++){
        //     String suffix = str.substring(i);
        //     System.out.println(suffix);
        //     insert(suffix);
        // }
        // System.out.println(countNodes(root));
        String words[] = {"a","banana","app","appl","ap","apply","apple"};
        for(int i = 0;i<words.length;i++){
            insert(words[i]);
        }
        longestWord(root, new StringBuilder(""));
        System.out.println(ans);
    }
}
