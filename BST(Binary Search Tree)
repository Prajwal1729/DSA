class Node{
    int data;
    Node left;
    Node right;

    Node(int data){
        this.data = data;
        // this.left = null;
        // this.right = null;
    }
}
class Main {
    public static Node insert(Node root, int val){
        if(root==null){
            root = new Node(val);
            return root;
        }

        if(root.data > val){
            root.left = insert(root.left,val);
        }

        else{
            root.right = insert(root.right,val);
        }
        return root;
    
    }

    public static void inOrder(Node root){
        if(root==null){
            return;
        }
        inOrder(root.left);
        System.out.print(root.data+" ");
        inOrder(root.right);
    }

    public static boolean searchInBST(Node root,int key){
        if(root==null){
            return false;
        }
        if(root.data > key){
            return searchInBST(root.left,key);
        }
        else if(root.data == key){
            return true;
        }
        else{
            return searchInBST(root.right,key);
        }
        
    }

    public static Node delete(Node root,int val){
        if(root.data > val){
            root.left = delete(root.left,val);
        }
        else if(root.data < val){
            root.right = delete(root.right,val);
        }
        else{
            // case1:
            if(root.left==null && root.right == null){
                return null;
            }
            // case2:
            if(root.left==null){
                return root.right;
            }
             else if(root.right==null){
                return root.left;
            }
            // case 3:
            Node IS = inorderSuccessor(root.right);
            root.data = IS.data;
            root.right = delete(root.right,IS.data);
        }
        return root;
    }

        public static Node inorderSuccessor(Node root){
            while(root.left!=null){
                root = root.left;
            }
            return root;
        }

    // Question 1: print nodes in a particular Range.
    public static void printinRange(Node root,int x,int y){
        if(root==null){
            return;
        }
        if(root.data>=x && root.data<=y){
           printinRange(root.left,x,y);
           System.out.print(root.data+" ");
           printinRange(root.right,x,y);
        }

        else if(root.data >= y){
            printinRange(root.left,x,y);
        }

        else{
            printinRange(root.right,x,y);
        }
    }

    // Question 2: root to leaf node path
    public static void printPath(ArrayList<Integer> path){
        for(int i = 0;i<path.size();i++){
            System.out.print(path.get(i)+" ---> ");
        }
        System.out.println();
    }

    public static void rootToLeafPaths(Node root,ArrayList<Integer> path){
        if(root==null){
            return;
        }
        path.add(root.data);
        if(root.left==null && root.right==null){
            printPath(path);
        }
        else{
            rootToLeafPaths(root.left,path);
            rootToLeafPaths(root.right,path);
        }
        path.remove(path.size()-1);
    }
    public static void main(String[] args) {
        // int nodes[] = {5,1,3,4,2,7};
        // int nodes[] = {8,5,3,1,4,6,10,11,14};
        int nodes[] = {8,5,3,6,10,11,14};
        Node root = null;

        for(int i = 0;i<nodes.length;i++){
            root = insert(root,nodes[i]);
        }

        inOrder(root);
        System.out.println();
        // if(searchInBST(root,7)){
        //     System.out.println("Found");
        // }
        // else{
        //     System.out.println("Not Found");
        // }

        // delete(root,4);
        // inOrder(root);

        // delete(root,5);
        // inOrder(root);

        // printinRange(root,3,12);
        rootToLeafPaths(root,new ArrayList<>());
        
    }
}
