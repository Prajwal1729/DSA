class Linked_List{
    Node head;
    private int size;
    Linked_List(){
        this.size=0;
    }
    class Node{
        int data;
        Node next;

        Node(int data){
            this.data = data;
            this.next = null;
        }
    }

    public void addFirst(int data){
        Node newNode = new Node(data);
        if(head==null){
            return;
        }
        newNode.next = head;
        head = newNode;
    }

    public void addLast(int data){
        Node newNode = new Node(data);
        if(head==null){
            head = newNode;
            return;
        }
        Node currNode = head;
        while(currNode.next!=null){
            currNode = currNode.next;
        }
        currNode.next = newNode;
    }

    public void printList(){
        if(head==null){
            return;
        }
        Node currNode = head;
        while(currNode!=null){
            System.out.print(currNode.data+"-->");
            currNode = currNode.next;
        }
        System.out.println("Null");
    }
    public void deleteFirst(){
        if(head==null){
            return;
        }
        head = head.next;
        size--;
    }

    public void deleteLast(){
        if(head==null){
            return;
        }
        if(head.next==null){
            head = null;
            return;
        }
        size--;
        Node secondLastNode = head;
        Node lastNode = head.next;
        if(lastNode.next!=null){
            secondLastNode = secondLastNode.next;
            lastNode = lastNode.next;
        }
        secondLastNode.next = null;
    }
    
    public int getSize(){
        return size;
    }

    public void reverseIterate(){
       if(head==null || head.next==null){
           return;
       }
        Node prevNode = head;
        Node currNode = head.next;
        while(currNode!=null){
            Node nextNode = currNode.next;
            currNode.next = prevNode;

            // Update:
            prevNode = currNode;
            currNode = nextNode;
            
        }
        head.next = null;
        head = prevNode;
    }

    public Node reverseRecursive(Node data){
        if(head == null || head.next==null){
            return head;
        }
        Node newHead = reverseRecursive(head.next);
        head.next.next = head;
        head.next = null;

        return newHead;
    }
}
class Main {
    public static void main(String[] args) {
        Linked_List list = new Linked_List();
        // list.addLast("is");
        // list.printList();

        // list.addFirst("this");
        // list.printList();

        // list.addLast("a");
        // list.printList();

        list.addLast(1);
        list.addLast(2);
        list.addLast(3);
        list.addLast(4);
        list.addLast(5);
        list.printList();

        list.reverseIterate();
        // list.head = list.reverseRecursive(list.head);
        list.printList();
        
    }
}
