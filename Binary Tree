class Node{
    int data;
    Node left;
    Node right;

    Node(int data){
        this.data = data;
        this.left = null;
        this.right = null;
    }
}
class BinaryTree{
    static int idx = -1;
    public static Node buildTree(int nodes[]){
        idx++;
        if(nodes[idx]==-1){
            return null;
        }
        Node newNode = new Node(nodes[idx]);
        newNode.left = buildTree(nodes);
        newNode.right = buildTree(nodes);
        return newNode;
    }
}

class Main {
    public static void preOrderTraversal(Node root){
        if(root==null){
            return;
        }
        System.out.print(root.data+ " ");
        preOrderTraversal(root.left);
        preOrderTraversal(root.right);
    }

    public static void inOrderTraversal(Node root){
        if(root==null){
            return;
        }
        inOrderTraversal(root.left);
        System.out.print(root.data+" ");
        inOrderTraversal(root.right);
    }

    public static void postOrderTraversal(Node root){
        if(root==null){
            return;
        }
        postOrderTraversal(root.left);
        postOrderTraversal(root.right);
        System.out.print(root.data+" ");
    }

    public static void levelOrderTraversal(Node root){
        Queue<Node> q = new LinkedList<>();
        if(root==null){
            return;
        }
        q.add(root);
        q.add(null);
        while(!q.isEmpty()){
            Node currNode = q.remove();
            if(currNode==null){
                System.out.println();
                if(q.isEmpty()){
                    break;
                }
                else{
                   q.add(null);
                 }
            }
            else{
                System.out.print(currNode.data+" ");
                if(currNode.left!=null){
                    q.add(currNode.left);
                }
                if(currNode.right!=null){
                    q.add(currNode.right);
                }
            }
            
        }
        
    }
    // Questions of Binary Tree:
    // Q.1) Count No.of Nodes:
    
    public static int countOfNodes(Node root){
        if(root==null){
            return 0;
        }
        int leftNodes = countOfNodes(root.left);
        int rightNodes = countOfNodes(root.right);

        return leftNodes + rightNodes + 1;
    }

    // Q.2) Calculate sum of nodes:

    public static int sumOfNodes(Node root){
        if(root==null){
            return 0;
        }
        int leftSumNodes = sumOfNodes(root.left);
        int rightSumNodes = sumOfNodes(root.right);
        return leftSumNodes + rightSumNodes + root.data;
    }
   // Q.3) Height of Tree
    public static int heightOfTree(Node root){
        if(root==null){
            return 0;
        }

        int leftTreeHeight = heightOfTree(root.left);
        int rightTreeHeight = heightOfTree(root.right);
        int maxHeight = Math.max(leftTreeHeight,rightTreeHeight);
        return maxHeight + 1;
    }
    // Q.4) Diameter of Tree
    // Approach1 : Time Complexity:- O(n^2)
    public static int diameterOfTree(Node root){
        if(root==null){
            return 0;
        }

        int leftdia = diameterOfTree(root.left);   // left-subtree diameter.
        int rightdia = diameterOfTree(root.right);  // right-subtree diameter.
        int dia = heightOfTree(root.left) + heightOfTree(root.right) + 1 ;   // Including the root Node.
        return Math.max(dia,Math.max(leftdia,rightdia));
    }

    // Approach2: Time Complexity:- O(n)

 static class TreeInfo{
        int ht;
        int diam;

        TreeInfo(int ht,int dia){
            this.ht = ht;
            this.diam = diam;
        }
        
    }

    public static TreeInfo diameter2(Node root){
        if(root==null){
            return new TreeInfo(0,0);
        }

        TreeInfo left = diameter2(root.left);
        TreeInfo right = diameter2(root.right);

        int myHeight = Math.max(left.ht,right.ht) + 1;
        int diam1 = left.diam;
        int diam2 = right.diam;
        int diam3 = left.ht + right.ht + 1;
        int mydiam = Math.max(Math.max(diam1,diam2),diam3);
        TreeInfo myInfo = new TreeInfo(myHeight,mydiam);
        return myInfo;
    }

    // Q.5) SubTree of Another Tree:
    
    
    public static void main(String[] args) {
        int nodes[] = {1,2,4,-1,-1,5,-1,-1,3,-1,6,-1,-1};
        BinaryTree t = new BinaryTree();
        Node root = t.buildTree(nodes);
        // System.out.println(root.data);
        // System.out.println("Pre-Order Traversal: ");
        // preOrderTraversal(root);
        // System.out.println();
        // System.out.println("Inorder Traversal: ");
        // inOrderTraversal(root);
        // System.out.println();
        // System.out.println("Post Order Traversal: ");
        // postOrderTraversal(root);
        // System.out.println("Level Order Traversal: ");
        // levelOrderTraversal(root);
        System.out.println(countOfNodes(root));
        System.out.println(sumOfNodes(root));
        System.out.println(heightOfTree(root));   
        System.out.println(diameterOfTree(root));
        // System.out.println(diameter2(root).diam);
    }
}
